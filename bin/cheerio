#!/usr/bin/env node
var cheerio = require('cheerio');
var find = require('cheerio-eq');
var program = require('commander');
var html = '';
program
	.option('-o, --output [value]', 'output method {html, text, size}', function(val) {
		if(val != 'html' && val != 'text' && val != 'size')
			return 'html';
		else
			return val;
	})
	.option('-a --attr [value]','attr select')
	.version(require('../package.json').version)
	.parse(process.argv);
program.output = program.output || 'html';
process.stdin.on('data', function(data) {
	html += data.toString();
});
process.stdin.on('end', function() {
	var $ = cheerio.load(html);
	var $res = find($, program.args.join(' '));
	if(program.output == 'size') {
		process.stdout.write($res.length.toString());
		process.stdout.write('\n');
	}else if(program.attr){
		for(var i = 0; i < $res.length; i++) { 
			process.stdout.write($res.eq(i)['attr'](program.attr).toString());
			process.stdout.write('\n');
		}
	}else{
		for(var i = 0; i < $res.length; i++) { 
			process.stdout.write($res.eq(i)[program.output]().toString());
			process.stdout.write('\n');
		}	
	}
});
process.stdout.on('error', function(err) {
	if (err.code === 'EPIPE') {
		// expected if output pipe closed, e.g. by `head`
		process.exit(0);
	} else {
		process.stderr.write(JSON.stringify(err) + '\n');
		process.exit(1);
	}
});
